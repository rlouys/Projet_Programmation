characters.c

/*---------------------------------------------------------------------*/

/**
* Retourne la taille de la Liste
* @param li La liste
* @return Le nombre d'élements de la Liste
*/
int list_length(List li)
{
	int size = 0;

	if(is_empty_list(li))
		return size;

	while(li != NULL)
	{
		size++;
		li = li->next;
	}

	return size;
}

// ---------------------------------------------------------------------- // 

	printf("Nombre d'éléments : %d\n", list_length(ally));




// ---------------------------------------------------------------------- // 

/*---------------------------------------------------------------------*/

List push_front_list_scanf(List li)
{
	Ally *element;

	element = malloc(sizeof(*element));

	if(element == NULL)
	{
		fprintf(stderr, "Erreur : probleme allocation dynamique.\n");
		exit(EXIT_FAILURE);
	}

	printf("Entrez un chiffre (début de liste): ");
	scanf("%d", &element->health);


	if(is_empty_list(li))
		element->next = NULL;
	else
		element->next = li;

	return element;
}
*---------------------------------------------------------------------*/

/**
* Ajoute un entier en fin de Liste
* @param li La liste
* @param x L'entier à insérer
* @return La liste avec le nouvel élement ajouté
*/
List push_back_list(List li, int x)
{
	Ally *element;

	element = malloc(sizeof(*element));

	if(element == NULL)
	{
		fprintf(stderr, "Erreur : probleme allocation dynamique.\n");
		exit(EXIT_FAILURE);
	}

	element->health = x;// ------------------------------------------------------------------ //

/*void Display()
{	
	glClearColor(0.0f,0.0f0

    glPushMatrix();
    glTranslatef(xPos, yPos, 0);

    HeroCharacter(direction); // génère le perso
    updatePos(direction); // permet le déplacement

    glPopMatrix();
    glFlush();
    tick++;

}*/

// ------------------------------------------------------------------ //


/*void WelcomeDisplay()
{	

	glClearColor(0.0f,0.0f,0.0f,0.0f);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    //drawWall(mX, mY);

    glColor3f(1, 0, 0);

    glRasterPos3f(50, 500, 1);
    char msg1[]="SUSTAINABLE MOBILITY : SUBSISTANCE";
    for(int i = 0; i <strlen(msg1);i++)
    	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, msg1[i]);

    glRasterPos3f(50, 480, 1);
    char msg2[]="----------------------------------------------------";
    for(int i = 0; i <strlen(msg2);i++)
    	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, msg2[i]);

    glRasterPos3f(50, 400, 0);
    char msg3[]="CONTINUER ('c')";
    for(int i = 0; i <strlen(msg3);i++)
    	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, msg3[i]);

    glRasterPos3f(50, 375, 0);
    char msg4[]="Nouvelle partie ('n')";
    for(int i = 0; i <strlen(msg4);i++)
    	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, msg4[i]);

    glRasterPos3f(50, 300, 0);
    char msg5[]="GAMEPLAY ('g')";
    for(int i = 0; i <strlen(msg5);i++)
    	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, msg5[i]);

    glRasterPos3f(50, 275, 0);
    char msg6[]="OPTIONS ('o')";
    for(int i = 0; i <strlen(msg6);i++)
    	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, msg6[i]);

    glRasterPos3f(50, 250, 0);
    char msg7[]="Sortie('x')";
    for(int i = 0; i <strlen(msg7);i++)
    	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, msg7[i]);

    glRasterPos3f(50, 50, 0);
    char msg8[]="Press 'c' to enter the game";
    for(int i = 0; i <strlen(msg8);i++)
    	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, msg8[i]);

    glutSwapBuffers();
}*/

// ------------------------------------------------------------------ //

/*void DisplayOptions()
{	


	glClearColor(0.0f,0.0f,0.0f,0.0f);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    //drawWall(mX, mY);

    glColor3f(1, 0, 0);

    glRasterPos3f(50, 500, 1);
    char msg1[]="OPTIONS";
    for(int i = 0; i <strlen(msg1);i++)
    	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, msg1[i]);

    glRasterPos3f(50, 480, 1);
    char msg2[]="------------";
    for(int i = 0; i <strlen(msg2);i++)
    	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, msg2[i]);

    glRasterPos3f(50, 400, 0);
    char msg3[]="LOREM IPSUM (...)";
    for(int i = 0; i <strlen(msg3);i++)
    	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, msg3[i]);

    
    glutSwapBuffers();
}*/
// ------------------------------------------------------------------ //

/*void DisplayGameplay()
{	
	glClearColor(0.0f,0.0f,0.0f,0.0f);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    //drawWall(mX, mY);

    glColor3f(1, 0, 0);

    glRasterPos3f(50, 500, 1);
    char msg1[]="GAMEPLAY";
    for(int i = 0; i <strlen(msg1);i++)
    	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, msg1[i]);

    glRasterPos3f(50, 480, 1);
    char msg2[]="---------------";
    for(int i = 0; i <strlen(msg2);i++)
    	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, msg2[i]);

    glRasterPos3f(50, 400, 0);
    char msg3[]="LOREM IPSUM (...)";
    for(int i = 0; i <strlen(msg3);i++)
    	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, msg3[i]);

    
    glutSwapBuffers();
}*/

// ------------------------------------------------------------------ //


// ------------------------------------------------------------------ //

/*void DisplayEnding()
{	
	glClearColor(0.0f,0.0f,0.0f,0.0f);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    //drawWall(mX, mY);

    glColor3f(1, 0, 0);

    glRasterPos3f(50, 500, 1);
    char msg1[]="CYA";
    for(int i = 0; i <strlen(msg1);i++)
    	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, msg1[i]);

    glRasterPos3f(50, 480, 1);
    char msg2[]="-----------------";
    for(int i = 0; i <strlen(msg2);i++)
    	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, msg2[i]);

    glRasterPos3f(50, 400, 0);
    char msg3[]="CREDITS (...)";
    for(int i = 0; i <strlen(msg3);i++)
    	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, msg3[i]);

    
    glutSwapBuffers();
}*/

// ------------------------------------------------------------------ //

/*void myMenu(int id){
	switch(id){

		case 2:
			printf("Options\n");
			break;
		case 3:
			printf("Gameplay\n");
			break;
		case 4:
			printf("Pause\n");	
			break;
		case 5:
			printf("_!_Cheat_mode_!_");	
		case 6:
			printf("Cya!");	
	}
}*/

// ------------------------------------------------------------------ //

	if(is_empty_list(li))
		return element;

	Ally *temp;
	temp = li;

	while(temp->next != NULL)
		temp = temp->next;

	temp->next = element;

	return li;
}

/*---------------------------------------------------------------------*/

/**
* Ajoute un entier en début de Liste
* @param li La liste
* @param x L'entier à insérer
* @return La liste avec le nouvel élement ajouté
*/
List push_front_list(List li, int x)
{
	Ally *element;

	element = malloc(sizeof(*element));

	if(element == NULL)
	{
		fprintf(stderr, "Erreur : probleme allocation dynamique.\n");
		exit(EXIT_FAILURE);
	}

	element->health = x;

	if(is_empty_list(li))
		element->next = NULL;
	else
		element->next = li;

	return element;
}
// ---------------------------------------------------------------------- // 
// ---------------------------------------------------------------------- // 
// ---------------------------------------------------------------------- // 
// ---------------------------------------------------------------------- // 
// ---------------------------------------------------------------------- // 
// ---------------------------------------------------------------------- // 
// ---------------------------------------------------------------------- // 
// ---------------------------------------------------------------------- // 
// ---------------------------------------------------------------------- // 
// ---------------------------------------------------------------------- // 
// ---------------------------------------------------------------------- // 


main.c

/*ally = push_front_list(ally, 36);
	print_character(ally);

	ally = push_front_list(ally, 87);
	ally = push_front_list_scanf(ally);
		print_character(ally);

	ally = push_front_list_scanf(ally);
	print_character(ally);
	ally = push_front_list_scanf(ally);
	print_character(ally);*/


main.c
-------------



 case 'c':
		glutDisplayFunc(Display);
		break;
	case 'n':
		glutDisplayFunc(Display);
		break;
	case 'x':
		glutDisplayFunc(DisplayEnding);
		break;
	case 'g':
		glutDisplayFunc(DisplayGameplay);
		break;
	case 'o':
		glutDisplayFunc(DisplayOptions);		
		break;	    
	case 'm':
		glutDisplayFunc(WelcomeDisplay);	
    };






characters.h


List push_back_list(List li, int x);


// ---------------------------------------------------------------------- // 

	List push_front_list_scanf(List li);

// ---------------------------------------------------------------------- // 
// ---------------------------------------------------------------------- // 
// ---------------------------------------------------------------------- // 
// ---------------------------------------------------------------------- // 
// ---------------------------------------------------------------------- // 
// ---------------------------------------------------------------------- // 
// ---------------------------------------------------------------------- // 
// ---------------------------------------------------------------------- // 
// ---------------------------------------------------------------------- // 
// ---------------------------------------------------------------------- // 
// ---------------------------------------------------------------------- // 
// ---------------------------------------------------------------------- // 

List push_front_list(List li, int x);

// ------------------------------------------------------------------ //

/*void Display()
{	
	glClearColor(0.0f,0.0f0

    glPushMatrix();
    glTranslatef(xPos, yPos, 0);

    HeroCharacter(direction); // génère le perso
    updatePos(direction); // permet le déplacement

    glPopMatrix();
    glFlush();
    tick++;

}*/

// ------------------------------------------------------------------ //


/*void WelcomeDisplay()
{	

	glClearColor(0.0f,0.0f,0.0f,0.0f);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    //drawWall(mX, mY);

    glColor3f(1, 0, 0);

    glRasterPos3f(50, 500, 1);
    char msg1[]="SUSTAINABLE MOBILITY : SUBSISTANCE";
    for(int i = 0; i <strlen(msg1);i++)
    	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, msg1[i]);

    glRasterPos3f(50, 480, 1);
    char msg2[]="----------------------------------------------------";
    for(int i = 0; i <strlen(msg2);i++)
    	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, msg2[i]);

    glRasterPos3f(50, 400, 0);
    char msg3[]="CONTINUER ('c')";
    for(int i = 0; i <strlen(msg3);i++)
    	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, msg3[i]);

    glRasterPos3f(50, 375, 0);
    char msg4[]="Nouvelle partie ('n')";
    for(int i = 0; i <strlen(msg4);i++)
    	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, msg4[i]);

    glRasterPos3f(50, 300, 0);
    char msg5[]="GAMEPLAY ('g')";
    for(int i = 0; i <strlen(msg5);i++)
    	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, msg5[i]);

    glRasterPos3f(50, 275, 0);
    char msg6[]="OPTIONS ('o')";
    for(int i = 0; i <strlen(msg6);i++)
    	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, msg6[i]);

    glRasterPos3f(50, 250, 0);
    char msg7[]="Sortie('x')";
    for(int i = 0; i <strlen(msg7);i++)
    	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, msg7[i]);

    glRasterPos3f(50, 50, 0);
    char msg8[]="Press 'c' to enter the game";
    for(int i = 0; i <strlen(msg8);i++)
    	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, msg8[i]);

    glutSwapBuffers();
}*/

// ------------------------------------------------------------------ //

/*void DisplayOptions()
{	


	glClearColor(0.0f,0.0f,0.0f,0.0f);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    //drawWall(mX, mY);

    glColor3f(1, 0, 0);

    glRasterPos3f(50, 500, 1);
    char msg1[]="OPTIONS";
    for(int i = 0; i <strlen(msg1);i++)
    	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, msg1[i]);

    glRasterPos3f(50, 480, 1);
    char msg2[]="------------";
    for(int i = 0; i <strlen(msg2);i++)
    	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, msg2[i]);

    glRasterPos3f(50, 400, 0);
    char msg3[]="LOREM IPSUM (...)";
    for(int i = 0; i <strlen(msg3);i++)
    	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, msg3[i]);

    
    glutSwapBuffers();
}*/
// ------------------------------------------------------------------ //

/*void DisplayGameplay()
{	
	glClearColor(0.0f,0.0f,0.0f,0.0f);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    //drawWall(mX, mY);

    glColor3f(1, 0, 0);

    glRasterPos3f(50, 500, 1);
    char msg1[]="GAMEPLAY";
    for(int i = 0; i <strlen(msg1);i++)
    	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, msg1[i]);

    glRasterPos3f(50, 480, 1);
    char msg2[]="---------------";
    for(int i = 0; i <strlen(msg2);i++)
    	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, msg2[i]);

    glRasterPos3f(50, 400, 0);
    char msg3[]="LOREM IPSUM (...)";
    for(int i = 0; i <strlen(msg3);i++)
    	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, msg3[i]);

    
    glutSwapBuffers();
}*/

// ------------------------------------------------------------------ //


// ------------------------------------------------------------------ //

/*void DisplayEnding()
{	
	glClearColor(0.0f,0.0f,0.0f,0.0f);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    //drawWall(mX, mY);

    glColor3f(1, 0, 0);

    glRasterPos3f(50, 500, 1);
    char msg1[]="CYA";
    for(int i = 0; i <strlen(msg1);i++)
    	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, msg1[i]);

    glRasterPos3f(50, 480, 1);
    char msg2[]="-----------------";
    for(int i = 0; i <strlen(msg2);i++)
    	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, msg2[i]);

    glRasterPos3f(50, 400, 0);
    char msg3[]="CREDITS (...)";
    for(int i = 0; i <strlen(msg3);i++)
    	glutBitmapCharacter(GLUT_BITMAP_9_BY_15, msg3[i]);

    
    glutSwapBuffers();
}*/

// ------------------------------------------------------------------ //

/*void myMenu(int id){
	switch(id){

		case 2:
			printf("Options\n");
			break;
		case 3:
			printf("Gameplay\n");
			break;
		case 4:
			printf("Pause\n");	
			break;
		case 5:
			printf("_!_Cheat_mode_!_");	
		case 6:
			printf("Cya!");	
	}
}*/

// ------------------------------------------------------------------ //

